[{"/home/aditya/Documents/git/chat-demo/src/index.js":"1","/home/aditya/Documents/git/chat-demo/src/reportWebVitals.js":"2","/home/aditya/Documents/git/chat-demo/src/App.js":"3","/home/aditya/Documents/git/chat-demo/src/SideMenu.js":"4","/home/aditya/Documents/git/chat-demo/src/Header.js":"5","/home/aditya/Documents/git/chat-demo/src/constants.js":"6","/home/aditya/Documents/git/chat-demo/src/UserList.js":"7","/home/aditya/Documents/git/chat-demo/src/UserInfo.js":"8","/home/aditya/Documents/git/chat-demo/src/RoomList.js":"9","/home/aditya/Documents/git/chat-demo/src/Welcome.js":"10","/home/aditya/Documents/git/chat-demo/src/CreateRoom.js":"11"},{"size":539,"mtime":1611890742637,"results":"12","hashOfConfig":"13"},{"size":364,"mtime":1611429428592,"results":"14","hashOfConfig":"13"},{"size":1585,"mtime":1611932776662,"results":"15","hashOfConfig":"13"},{"size":1171,"mtime":1611903518335,"results":"16","hashOfConfig":"13"},{"size":1020,"mtime":1611908782324,"results":"17","hashOfConfig":"13"},{"size":283,"mtime":1611907560422,"results":"18","hashOfConfig":"13"},{"size":1557,"mtime":1611930733330,"results":"19","hashOfConfig":"13"},{"size":1667,"mtime":1611930523722,"results":"20","hashOfConfig":"13"},{"size":1639,"mtime":1611932236899,"results":"21","hashOfConfig":"13"},{"size":980,"mtime":1611907513965,"results":"22","hashOfConfig":"13"},{"size":3934,"mtime":1611917511450,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"cq145k",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"/home/aditya/Documents/git/chat-demo/src/index.js",[],["51","52"],"/home/aditya/Documents/git/chat-demo/src/reportWebVitals.js",[],"/home/aditya/Documents/git/chat-demo/src/App.js",[],"/home/aditya/Documents/git/chat-demo/src/SideMenu.js",[],"/home/aditya/Documents/git/chat-demo/src/Header.js",[],"/home/aditya/Documents/git/chat-demo/src/constants.js",[],["53","54"],"/home/aditya/Documents/git/chat-demo/src/UserList.js",[],"/home/aditya/Documents/git/chat-demo/src/UserInfo.js",["55"],"import Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport function UserInfo(props) {\n  const [loading, setLoading] = useState(false)\n  const [user, setUser] = useState({})\n  useEffect(() => {\n    setLoading(true)\n    axios.get(`http://localhost:5000/users/${props.match.params.user_id}`).then(res => {\n      console.log(res, 'res')\n      setUser(res.data)\n      setLoading(false)\n    }).catch(err => {\n      setLoading(false)\n      console.log(err, 'x')\n    })\n  }, [])\n  \n  return loading ? <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'row'}}><CircularProgress /></div> : <Box style={{ padding: 20, backgroundColor: 'white' }}>\n      <Typography\n        variant=\"subtitle2\"\n        style={{ color: '#5d6d7e', fontWeight: 'bold' }}\n      >\n        Name\n      </Typography>\n      <Typography variant=\"body1\">{user.name}</Typography>\n      <br />\n      <Typography\n        variant=\"subtitle2\"\n        style={{ color: '#5d6d7e', fontWeight: 'bold' }}\n      >\n        Contact\n      </Typography>\n      <Typography variant=\"body1\">{user.phone}</Typography>\n      <br />\n      <Typography\n        variant=\"subtitle2\"\n        style={{ color: '#5d6d7e', fontWeight: 'bold' }}\n      >\n        Email\n      </Typography>\n      <Typography variant=\"body1\">{user.email}</Typography>\n      <br />\n      <Button variant=\"contained\" color=\"primary\">\n        Message\n      </Button>\n    </Box>\n}\n","/home/aditya/Documents/git/chat-demo/src/RoomList.js",["56"],"import List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    zIndex: 0,\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\nexport default function RoomList(props) {\n  const classes = useStyles();\n\n  const [listLoading, setListLoading] = useState(false)\n  const [rooms, setRooms] = useState([])\n\n  useEffect(() => {\n    setListLoading(true)\n    axios.get('http://localhost:5000/rooms').then(res => {\n      console.log(res, 'res')\n      setRooms(res.data)\n      setListLoading(false)\n    }).catch(err => {\n      setListLoading(false)\n      console.log(err, 'x')\n    })\n  }, [])\n  \n  return (\n    <List className={classes.root}>\n      {rooms.map(room => <>\n      <ListItem alignItems=\"flex-start\">\n        <ListItemText\n          primary={room.title}\n          secondary={\n            <>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {room.created_by}\n              </Typography>\n              {'- '} {room.create_date}\n            </>\n          }\n        />\n      \n      </ListItem><Divider/></>) \n}\n          </List>\n  );\n}\n","/home/aditya/Documents/git/chat-demo/src/Welcome.js",[],"/home/aditya/Documents/git/chat-demo/src/CreateRoom.js",["57"],"import TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { FormControl } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { useState } from 'react';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\n\nconst HELPER_TEXTS = {\n    TITLE_NOT_EMPTY: 'Title for room cannot be empty',\n};\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nconst MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300,\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    chip: {\n      margin: 2,\n      backgroundColor: '#6d8eae',\n      color: 'white'\n    },\n    noLabel: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\nexport default function CreateRoom() {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [titleHelperText, setTitleHelperText] = useState('');\n  const [users, setUsers] = useState([\n    'Oliver Hansen',\n    'Van Henry',\n    'April Tucker',\n    'Ralph Hubbard',\n    'Omar Alexander',\n    'Carlos Abbott',\n    'Miriam Wagner',\n    'Bradley Wilkerson',\n    'Virginia Andrews',\n    'Kelly Snyder',\n  ])\n  const [members, setMembers] = useState([])\n  const classes = useStyles();\n  \n  const onTitleChange = (event) => {\n    setTitleError(false);\n    setTitleHelperText(false);\n    setTitle(event.target.value);\n  };\n\n  const onTitleBlur = () => {\n    if (title === '') {\n        setTitleError(true);\n        setTitleHelperText(HELPER_TEXTS.TITLE_NOT_EMPTY);\n    }\n  };\n\n  const onMembersChange = (event) => {\n    setMembers(event.target.value)\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      style={{ backgroundColor: 'white', padding: 10 }}\n    >\n      <FormControl style={{ backgroundColor: 'white', padding: 10 }}>\n        <TextField\n          id=\"title\"\n          label=\"Title\"\n          variant=\"outlined\"\n          value={title}\n          error={titleError}\n          onChange={onTitleChange}\n          onBlur={onTitleBlur}\n          helperText={titleHelperText}\n          required\n        />\n      </FormControl>\n      <br/>\n      <FormControl style={{ backgroundColor: 'white', padding: 10 }}>\n        <InputLabel style={{ backgroundColor: 'white', padding: 10 }} id=\"demo-mutiple-checkbox-label\">Members</InputLabel>\n        <Select\n          labelId=\"demo-mutiple-checkbox-label\"\n          id=\"demo-mutiple-checkbox\"\n          multiple\n          value={members}\n          onChange={onMembersChange}\n          input={<Input />}\n          renderValue={(selected) => (\n            <div className={classes.chips}>\n              {selected.map((value) => (\n                <Chip key={value} label={value} className={classes.chip} />\n              ))}\n            </div>\n          )}\n          MenuProps={MenuProps}\n        >\n          {users.map((user) => (\n            <MenuItem key={user} value={user}>\n              <Checkbox checked={members.indexOf(user) > -1} />\n              <ListItemText primary={user} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl\n        style={{\n          backgroundColor: 'white',\n          padding: 10,\n          width: 200,\n        }}\n      >\n        <Button variant=\"contained\" color=\"primary\">\n          Create Room\n        </Button>\n      </FormControl>\n    </Box>\n  );\n}\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":21,"column":6,"nodeType":"66","endLine":21,"endColumn":8,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":24,"column":10,"nodeType":"70","messageId":"71","endLine":24,"endColumn":21},{"ruleId":"68","severity":1,"message":"72","line":55,"column":17,"nodeType":"70","messageId":"71","endLine":55,"endColumn":25},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],["73"],["74"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.user_id'. Either include it or remove the dependency array.","ArrayExpression",["75"],"no-unused-vars","'listLoading' is assigned a value but never used.","Identifier","unusedVar","'setUsers' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [props.match.params.user_id]",{"range":"78","text":"79"},[705,707],"[props.match.params.user_id]"]